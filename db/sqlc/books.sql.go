// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: books.sql

package db

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
  title, price, stock
) VALUES (
  $1, $2, $3
)
RETURNING id, title, price, stock, created_at
`

type CreateBookParams struct {
	Title string  `json:"title"`
	Price float64 `json:"price"`
	Stock int32   `json:"stock"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.Title, arg.Price, arg.Stock)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :one
DELETE FROM books WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteBook, id)
	err := row.Scan(&id)
	return id, err
}

const getBook = `-- name: GetBook :one
SELECT id, title, price, stock, created_at FROM books WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
	)
	return i, err
}

const updateBookPrice = `-- name: UpdateBookPrice :one
UPDATE books SET price = $2 WHERE id = $1 RETURNING id, title, price, stock, created_at
`

type UpdateBookPriceParams struct {
	ID    int64   `json:"id"`
	Price float64 `json:"price"`
}

func (q *Queries) UpdateBookPrice(ctx context.Context, arg UpdateBookPriceParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBookPrice, arg.ID, arg.Price)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
	)
	return i, err
}

const updateBookStock = `-- name: UpdateBookStock :one
UPDATE books SET stock = $2 WHERE id = $1 RETURNING id, title, price, stock, created_at
`

type UpdateBookStockParams struct {
	ID    int64 `json:"id"`
	Stock int32 `json:"stock"`
}

func (q *Queries) UpdateBookStock(ctx context.Context, arg UpdateBookStockParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBookStock, arg.ID, arg.Stock)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
	)
	return i, err
}
